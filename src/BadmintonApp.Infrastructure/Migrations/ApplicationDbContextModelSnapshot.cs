// <auto-generated />
using System;
using BadmintonApp.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BadmintonApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("BadmintonApp.Domain.Clubs.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalCourts")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Clubs.WorkingHour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("TEXT");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe2da074-fff1-426f-b045-44427951a6eb"),
                            Name = "ClubsView"
                        },
                        new
                        {
                            Id = new Guid("31f6a90f-2d85-4d9d-92aa-85e702289278"),
                            Name = "PlayersManage"
                        },
                        new
                        {
                            Id = new Guid("ac341087-ee9a-49c1-ac8b-0b34e28cdee8"),
                            Name = "ClubsAssignAdmin"
                        },
                        new
                        {
                            Id = new Guid("a5263fcf-69e8-47b2-8bf4-466a71292137"),
                            Name = "ClubsManageAll"
                        },
                        new
                        {
                            Id = new Guid("37368913-d1ac-488a-ad47-44d75c453f5a"),
                            Name = "TrainingsManage"
                        },
                        new
                        {
                            Id = new Guid("b0010909-dd1e-4e33-ab89-7a09fddcbf49"),
                            Name = "ClubsManageOwn"
                        },
                        new
                        {
                            Id = new Guid("08556e74-e70f-4f19-8322-8a6371a359b7"),
                            Name = "RolesManage"
                        },
                        new
                        {
                            Id = new Guid("7167cda8-c1b8-425b-af52-eb9aa3e27d2b"),
                            Name = "AnalyticsViewAll"
                        },
                        new
                        {
                            Id = new Guid("12e48bab-edee-4833-830d-129f36e26c71"),
                            Name = "AnalyticsViewOwn"
                        });
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            Name = "SuperAdmin"
                        },
                        new
                        {
                            Id = new Guid("98e5cfcd-cada-486a-96bb-30b6a9a60174"),
                            Name = "ClubAdmin"
                        },
                        new
                        {
                            Id = new Guid("bb074c39-08df-45d9-8e74-5b6a07257883"),
                            Name = "ClubManager"
                        },
                        new
                        {
                            Id = new Guid("5b0ac8d3-e270-422f-af95-99e8be79e47a"),
                            Name = "Player"
                        });
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("fe2da074-fff1-426f-b045-44427951a6eb")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("31f6a90f-2d85-4d9d-92aa-85e702289278")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("ac341087-ee9a-49c1-ac8b-0b34e28cdee8")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("a5263fcf-69e8-47b2-8bf4-466a71292137")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("37368913-d1ac-488a-ad47-44d75c453f5a")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("b0010909-dd1e-4e33-ab89-7a09fddcbf49")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("08556e74-e70f-4f19-8322-8a6371a359b7")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("7167cda8-c1b8-425b-af52-eb9aa3e27d2b")
                        },
                        new
                        {
                            RoleId = new Guid("45225223-0e47-4c7a-b045-38de629412e5"),
                            PermissionId = new Guid("12e48bab-edee-4833-830d-129f36e26c71")
                        },
                        new
                        {
                            RoleId = new Guid("98e5cfcd-cada-486a-96bb-30b6a9a60174"),
                            PermissionId = new Guid("fe2da074-fff1-426f-b045-44427951a6eb")
                        },
                        new
                        {
                            RoleId = new Guid("98e5cfcd-cada-486a-96bb-30b6a9a60174"),
                            PermissionId = new Guid("b0010909-dd1e-4e33-ab89-7a09fddcbf49")
                        },
                        new
                        {
                            RoleId = new Guid("98e5cfcd-cada-486a-96bb-30b6a9a60174"),
                            PermissionId = new Guid("31f6a90f-2d85-4d9d-92aa-85e702289278")
                        },
                        new
                        {
                            RoleId = new Guid("98e5cfcd-cada-486a-96bb-30b6a9a60174"),
                            PermissionId = new Guid("37368913-d1ac-488a-ad47-44d75c453f5a")
                        },
                        new
                        {
                            RoleId = new Guid("98e5cfcd-cada-486a-96bb-30b6a9a60174"),
                            PermissionId = new Guid("7167cda8-c1b8-425b-af52-eb9aa3e27d2b")
                        },
                        new
                        {
                            RoleId = new Guid("bb074c39-08df-45d9-8e74-5b6a07257883"),
                            PermissionId = new Guid("31f6a90f-2d85-4d9d-92aa-85e702289278")
                        },
                        new
                        {
                            RoleId = new Guid("bb074c39-08df-45d9-8e74-5b6a07257883"),
                            PermissionId = new Guid("37368913-d1ac-488a-ad47-44d75c453f5a")
                        },
                        new
                        {
                            RoleId = new Guid("bb074c39-08df-45d9-8e74-5b6a07257883"),
                            PermissionId = new Guid("b0010909-dd1e-4e33-ab89-7a09fddcbf49")
                        });
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("Rank")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.UserClubRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId", "ClubId");

                    b.HasIndex("ClubId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserClubRoles");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Logs.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExceptionJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Trainings.Training", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("AllowedLevels")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("TEXT");

                    b.Property<int>("CourtsUsed")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRecurringWeekly")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrainerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Trainings.TrainingParticipant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingParticipants");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Trainings.TrainingQueueEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("QueuedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("TrainingId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TrainingId");

                    b.ToTable("TrainingQueueEntries");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Clubs.WorkingHour", b =>
                {
                    b.HasOne("BadmintonApp.Domain.Clubs.Club", "Club")
                        .WithMany("WorkingHours")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.RolePermission", b =>
                {
                    b.HasOne("BadmintonApp.Domain.Core.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BadmintonApp.Domain.Core.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.UserClubRole", b =>
                {
                    b.HasOne("BadmintonApp.Domain.Clubs.Club", "Club")
                        .WithMany("UserRoles")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BadmintonApp.Domain.Core.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BadmintonApp.Domain.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.UserRole", b =>
                {
                    b.HasOne("BadmintonApp.Domain.Core.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BadmintonApp.Domain.Core.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Trainings.TrainingParticipant", b =>
                {
                    b.HasOne("BadmintonApp.Domain.Trainings.Training", null)
                        .WithMany("Participants")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Trainings.TrainingQueueEntry", b =>
                {
                    b.HasOne("BadmintonApp.Domain.Trainings.Training", null)
                        .WithMany("Queue")
                        .HasForeignKey("TrainingId");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Clubs.Club", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Core.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BadmintonApp.Domain.Trainings.Training", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("Queue");
                });
#pragma warning restore 612, 618
        }
    }
}

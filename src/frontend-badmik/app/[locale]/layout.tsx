// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "../styles/globals.scss";
// import Header from '../components/shared/Header/Header';
// import { NextIntlClientProvider } from "next-intl";
// import requestConfig from "@/i18n/request";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default async function RootLayout({
//   children,
//   params,
// }: Readonly<{
//   children: React.ReactNode;
//   params: { locale: string };
// }>) {

//   const { messages, locale } = await requestConfig({
//     requestLocale: Promise.resolve(params.locale),
//   });

//   return (
//      <html lang={locale}>
//       <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
//         <NextIntlClientProvider locale={locale} messages={messages}>
//           <Header />
//           {children}
//         </NextIntlClientProvider>
//       </body>
//     </html>
//   );
// }

//==================================

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../styles/globals.scss";
import Header from '../components/shared/Header/Header';
import { NextIntlClientProvider, hasLocale } from "next-intl";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import requestConfig from "@/i18n/request";



const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function LocaleLayout({
  children,
  params
}: {
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}) {
  const { locale } = await params;

  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  const { messages } = await requestConfig({
    requestLocale: Promise.resolve(locale),
  });

  return (
    <html lang={locale}>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <NextIntlClientProvider locale={locale} messages={messages}>
          <Header />
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

